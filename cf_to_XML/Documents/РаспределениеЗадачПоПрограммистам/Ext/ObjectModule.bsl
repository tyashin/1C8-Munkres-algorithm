////////////////////////////////////////////////////////////////////////////////
// Реализация распределения задач по исполнителям с помощью Венгерского алгоритма (алгоритма Манкреса)
// Это портированная с C# версия алгоритма. 
// Исходная реализация и пояснения к алгоритму находятся здесь: http://csclab.murraystate.edu/~bob.pilgrim/445/munkres.html 
////////////////////////////////////////////////////////////////////////////////

#Область ОписаниеПеременных

Перем МатрицаНазначений, МатрицаМаска, Пути, НакрывающаяСтрока, НакрывающийСтолбец, КолВоСтрокМатрицы, КолВоСтолбцовМатрицы, 
СчетчикПутей, path_row_0, path_col_0, ШагАлгоритма; //Переменные Венгерского алгоритма

Перем МаксЗначениеПриоритет; //Если Программист и Менеджер используют приоритеты 0..9, то максимльный приоритет задачи = 18.

#КонецОбласти


#Область СлужебныеПроцедурыИФункции

//Точка входа в алгоритм. 
Процедура ВыполнитьРаспределениеЗадач()  Экспорт
	МатрицаНазначений = Новый Массив(РазмерностьМатрицы,РазмерностьМатрицы);
	МатрицаМаска = Новый Массив(РазмерностьМатрицы,РазмерностьМатрицы);
	Пути = Новый Массив(РазмерностьМатрицы*2+1, 2);
	НакрывающаяСтрока = Новый Массив(РазмерностьМатрицы);
	НакрывающийСтолбец = Новый Массив(РазмерностьМатрицы);
	СчетчикПутей = 0;
	КолВоСтрокМатрицы = РазмерностьМатрицы;
	КолВоСтолбцовМатрицы = РазмерностьМатрицы;
	МаксЗначениеПриоритет = 18;
	ШагАлгоритма = 1;
	ЗагрузитьМатрицу(РазмерностьМатрицы);
	Завершено = Ложь;
	Пока НЕ Завершено Цикл
		Если ШагАлгоритма = 1 Тогда
			ВыполнитьШагПервый(ШагАлгоритма);
		ИначеЕсли ШагАлгоритма = 2 Тогда
			ВыполнитьШагВторой(ШагАлгоритма);
		ИначеЕсли ШагАлгоритма = 3 Тогда
			ВыполнитьШагТретий(ШагАлгоритма);
		ИначеЕсли ШагАлгоритма = 4 Тогда
			ВыполнитьШагЧетвертый(ШагАлгоритма);
		ИначеЕсли ШагАлгоритма = 5 Тогда
			ВыполнитьШагПятый(ШагАлгоритма);
		ИначеЕсли ШагАлгоритма = 6 Тогда
			ВыполнитьШагШестой(ШагАлгоритма);
		ИначеЕсли ШагАлгоритма = 7 Тогда
			ЗагрузитьДанныеИзМатрицыВТЧ();
			Завершено = Истина;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

//Процедура преобразует ТЧ "ЗадачиПоПрограммистам" документа, в матрицу
Процедура ЗагрузитьМатрицу(РазмерностьМатрицы)  
	Для Инд = 0 По РазмерностьМатрицы-1 Цикл
		Для Инд1 = 0 По РазмерностьМатрицы-1 Цикл
			ИндексСтрокиТЧ = Инд*РазмерностьМатрицы + Инд1;
			СтрокаТЧ = ЗадачиПоПрограммистам[ИндексСтрокиТЧ];
			МатрицаНазначений[Инд][Инд1] = МаксЗначениеПриоритет - СтрокаТЧ.ПриоритетМенеджера - СтрокаТЧ.ПриоритетПрограммиста;
		КонецЦикла;
	КонецЦикла;
	ОбнулитьМаски();
КонецПроцедуры

//Завершающий этап: процедура загружает данные о распределенных задачах из матрицы в ТЧ "ЗадачиПоПрограммистам"
Процедура ЗагрузитьДанныеИзМатрицыВТЧ()
	Для Инд = 0 По РазмерностьМатрицы-1 Цикл
		Для Инд1 = 0 По РазмерностьМатрицы-1 Цикл
			ИндексСтрокиТЧ = Инд*РазмерностьМатрицы + Инд1;
			СтрокаТЧ = ЗадачиПоПрограммистам[ИндексСтрокиТЧ];
			СтрокаТЧ.ЗадачаРаспределена = МатрицаМаска[Инд][Инд1]=1;
		КонецЦикла;
	КонецЦикла;
КонецПроцедуры

//Процедура обнуляет вспомогательные массивы.
Процедура ОбнулитьМаски()
	Для ИндексСтроки = 0 По КолВоСтрокМатрицы-1 Цикл
		НакрывающаяСтрока[ИндексСтроки] = 0;
		Для ИндексСтолбца = 0 По КолВоСтолбцовМатрицы-1 Цикл
			МатрицаМаска[ИндексСтроки][ИндексСтолбца] = 0;
		КонецЦикла;
	КонецЦикла;
	
	Для ИндексСтолбца = 0 По КолВоСтолбцовМатрицы-1 Цикл
		НакрывающийСтолбец[ИндексСтолбца] = 0;
	КонецЦикла;
КонецПроцедуры

//Для каждой строки матрицы находим наименьшее значение и вычитаем его из каждого элемента этой строки.
Процедура ВыполнитьШагПервый(ШагАлгоритма)
	Перем МинимумПоСтроке;
	
	Для ИндексСтроки = 0 По КолВоСтрокМатрицы-1 Цикл
		МинимумПоСтроке = МатрицаНазначений[ИндексСтроки][0];
		Для ИндексСтолбца = 0 По КолВоСтолбцовМатрицы-1 Цикл
			Если МатрицаНазначений[ИндексСтроки][ИндексСтолбца] < МинимумПоСтроке Тогда
				МинимумПоСтроке = МатрицаНазначений[ИндексСтроки][ИндексСтолбца];
			КонецЕсли;
		КонецЦикла;
		Для ИндексСтолбца = 0 По КолВоСтолбцовМатрицы-1 Цикл
			МатрицаНазначений[ИндексСтроки][ИндексСтолбца] = МатрицаНазначений[ИндексСтроки][ИндексСтолбца] - МинимумПоСтроке;
		КонецЦикла;
	КонецЦикла;
	ШагАлгоритма = 2;
КонецПроцедуры

//Ищем "0" (Z) в матрице. Если в строке/столбце отсутствует отмеченный ранее "0", тогда отмечаем Z, установив звездочку (значение "1") в матрице-маске.
Процедура ВыполнитьШагВторой(ШагАлгоритма)
	Для ИндексСтроки = 0 По КолВоСтрокМатрицы-1 Цикл
		Для ИндексСтолбца = 0 По КолВоСтолбцовМатрицы-1 Цикл
			Если МатрицаНазначений[ИндексСтроки][ИндексСтолбца] = 0 И НакрывающаяСтрока[ИндексСтроки] = 0 И НакрывающийСтолбец[ИндексСтолбца] = 0 Тогда
				МатрицаМаска[ИндексСтроки][ИндексСтолбца] = 1;
				НакрывающаяСтрока[ИндексСтроки] = 1;
				НакрывающийСтолбец[ИндексСтолбца] = 1;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	Для ИндексСтроки = 0 По КолВоСтрокМатрицы-1 Цикл
		НакрывающаяСтрока[ИндексСтроки] = 0;
	КонецЦикла;
	
	Для ИндексСтолбца = 0 По КолВоСтолбцовМатрицы-1 Цикл
		НакрывающийСтолбец[ИндексСтолбца] = 0;
	КонецЦикла;
	ШагАлгоритма = 3;
КонецПроцедуры

//"Зачеркиваем (накрываем)"  каждый столбец матрицы, содержащий отмеченный "0" (мы его отметили звездочкой (символом "1") в матрице-маске на втором шаге).  
//Если все столбцы зачеркнуты (накрыты) - значит все задачи назначены исполнителям. В этом случае завершаем алгоритм, иначе переходим к шагу №4.
Процедура ВыполнитьШагТретий(ШагАлгоритма)
	СчетчикСтолбцов = 0;
	
	Для ИндексСтроки = 0 По КолВоСтрокМатрицы-1 Цикл
		Для ИндексСтолбца = 0 По КолВоСтолбцовМатрицы-1 Цикл
			Если МатрицаМаска[ИндексСтроки][ИндексСтолбца] = 1 Тогда
				НакрывающийСтолбец[ИндексСтолбца] = 1;
			КонецЕсли;	
		КонецЦикла;
	КонецЦикла;
	
	Для ИндексСтолбца = 0 По КолВоСтолбцовМатрицы-1 Цикл
		Если НакрывающийСтолбец[ИндексСтолбца] = 1 Тогда
			СчетчикСтолбцов = СчетчикСтолбцов + 1;
		КонецЕсли;
	КонецЦикла;		
	
	Если СчетчикСтолбцов >= КолВоСтолбцовМатрицы ИЛИ СчетчикСтолбцов >=КолВоСтрокМатрицы Тогда
		ШагАлгоритма = 7;
	Иначе
		ШагАлгоритма = 4;
	КонецЕсли;
КонецПроцедуры

//Вспомогательная процедура для шага №4 алгоритма
Процедура НайтиНулевоеЗначение(ТекСтрока, ТекСтолбец)
	ИндексСтолбца = 0;
	ИндексСтроки = 0;
	Завершено = Ложь;
	ТекСтрока = -1;
	ТекСтолбец = -1;
	
	Пока НЕ Завершено Цикл
		
		ИндексСтолбца = 0;
		Пока Истина Цикл
			Если МатрицаНазначений[ИндексСтроки][ИндексСтолбца] = 0 И НакрывающаяСтрока[ИндексСтроки] = 0 И НакрывающийСтолбец[ИндексСтолбца] = 0 Тогда
				ТекСтрока = ИндексСтроки;
				ТекСтолбец = ИндексСтолбца;
				Завершено = Истина;
			КонецЕсли;
			
			ИндексСтолбца = ИндексСтолбца + 1;
			Если ИндексСтолбца >= КолВоСтолбцовМатрицы ИЛИ Завершено Тогда
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		ИндексСтроки = ИндексСтроки +1;
		Если ИндексСтроки >= КолВоСтрокМатрицы Тогда
			Завершено = Истина;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

//Вспомогательная процедура для шага №4 алгоритма
Функция ВСтрокеЕстьЗвездочка(Знач ТекСтрока)
	Результат = Ложь;
	Для ИндексСтолбца = 0 По КолВоСтолбцовМатрицы-1 Цикл
		Если МатрицаМаска[ТекСтрока][ИндексСтолбца] = 1 Тогда
			Результат = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Результат;
КонецФункции

//Вспомогательная процедура для шага №4 алгоритма
Процедура НайтиЗвездочкуВСтроке(Знач ТекСтрока, ТекСтолбец)
	ТекСтолбец = -1;
	Для ИндексСтолбца = 0 По КолВоСтолбцовМатрицы-1 Цикл
		Если МатрицаМаска[ТекСтрока][ИндексСтолбца] = 1 Тогда
			ТекСтолбец = ИндексСтолбца;
		КонецЕсли;	
	КонецЦикла;
КонецПроцедуры
		
//Поищем не зачеркнутый (не накрытый) ноль в матрице и отметим его символом "2" (все отметки выполняются в матрице-маске)
//Если в этой строке, содержащей 0 отмеченный символом "2", нет нулей отмеченных звездочкой (символом "1"), переходим к шагу 5.
//Иначе "зачеркиваем (накрываем)" эту строку и снимаем зачеркивание у колонки, содержащий 0, отмеченный звездочкой (символом "1").
//Повторяем это действие пока не останется не зачернутых (не накрытых) нулей. Затем переходим к шагу 6.
Процедура ВыполнитьШагЧетвертый(ШагАлгоритма)
	ТекСтрока = -1;
	ТекСтолбец = -1;
	Завершено = Ложь;
	
	Пока НЕ Завершено Цикл
		НайтиНулевоеЗначение(ТекСтрока, ТекСтолбец);
		Если ТекСтрока = -1 Тогда
			Завершено = Истина;
			ШагАлгоритма = 6;
		Иначе
			МатрицаМаска[ТекСтрока][ТекСтолбец] = 2;
			Если ВСтрокеЕстьЗвездочка(ТекСтрока) Тогда
				НайтиЗвездочкуВСтроке(ТекСтрока, ТекСтолбец);
				НакрывающаяСтрока[ТекСтрока] = 1;
				НакрывающийСтолбец[ТекСтолбец] = 0;
			Иначе
				Завершено = Истина;
				ШагАлгоритма = 5;
				path_row_0 = ТекСтрока;
				path_col_0 = ТекСтолбец;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

//Вспомогательная процедура для шага №5 алгоритма
Процедура НайтиЗвездочкуВСтолбце(Знач ИндексСтолбца, ИндексСтроки)
	ИндексСтроки = -1;
	Для Инд = 0 По КолВоСтрокМатрицы-1 Цикл
		Если МатрицаМаска[Инд][ИндексСтолбца] = 1 Тогда
			ИндексСтроки = Инд;
		КонецЕсли;	
	КонецЦикла;
КонецПроцедуры

//Вспомогательная процедура для шага №5 алгоритма
Процедура НайтиПометкуВСтроке(Знач ИндексСтроки, ИндексСтолбца)
	Для Инд = 0 По КолВоСтолбцовМатрицы-1 Цикл
		Если МатрицаМаска[ИндексСтроки][Инд] = 2 Тогда
			ИндексСтолбца = Инд;
		КонецЕсли;	
	КонецЦикла;
КонецПроцедуры

//Вспомогательная процедура для шага №5 алгоритма
Процедура ДополнитьПуть()
	Для p = 0 По СчетчикПутей-1 Цикл
		Если МатрицаМаска[Пути[p][0]] [Пути[p][1]] = 1 Тогда
			МатрицаМаска[Пути[p][0]] [Пути[p][1]] = 0;
		Иначе
			МатрицаМаска[Пути[p][0]] [Пути[p][1]] = 1;
		КонецЕсли;	
	КонецЦикла;
КонецПроцедуры

//Вспомогательная процедура для шага №5 алгоритма
Процедура ОчиститьНакрывающиеСтрокуИСтолбец()
	Для ИндексСтроки = 0 По КолВоСтрокМатрицы-1 Цикл
		НакрывающаяСтрока[ИндексСтроки] = 0;
	КонецЦикла;	
	
	Для ИндексСтолбца = 0 По КолВоСтолбцовМатрицы-1 Цикл
		НакрывающийСтолбец[ИндексСтолбца] = 0;
	КонецЦикла;	
КонецПроцедуры

//Вспомогательная процедура для шага №5 алгоритма
Процедура УдалитьПометки()
	Для ИндексСтроки = 0 По КолВоСтрокМатрицы-1 Цикл
		Для ИндексСтолбца = 0 По КолВоСтолбцовМатрицы-1 Цикл
			Если МатрицаМаска[ИндексСтроки][ИндексСтолбца] = 2 Тогда
				МатрицаМаска[ИндексСтроки][ИндексСтолбца] = 0;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
КонецПроцедуры

Процедура ВыполнитьШагПятый(ШагАлгоритма)
	Завершено = Ложь;
	ИндексСтроки = -1;
	ИндексСтолбца = -1;
	СчетчикПутей = 1;
	Пути[СчетчикПутей - 1][0] = path_row_0;
	Пути[СчетчикПутей - 1][1] = path_col_0;
	
	Пока НЕ Завершено Цикл
		НайтиЗвездочкуВСтолбце(Пути[СчетчикПутей - 1][1], ИндексСтроки);
		Если ИндексСтроки > -1 Тогда
			СчетчикПутей = СчетчикПутей + 1;
			Пути[СчетчикПутей - 1][0] = ИндексСтроки;
			Пути[СчетчикПутей - 1][1] = Пути[СчетчикПутей - 2][1];
		Иначе
			Завершено = Истина;
		КонецЕсли;
		
		Если НЕ Завершено Тогда
			НайтиПометкуВСтроке(Пути[СчетчикПутей - 1][0], ИндексСтолбца);
			СчетчикПутей = СчетчикПутей + 1;
			Пути[СчетчикПутей - 1][0] = Пути[СчетчикПутей - 2][0];
			Пути[СчетчикПутей - 1][1] = ИндексСтолбца;
		КонецЕсли;
	КонецЦикла;
	
	ДополнитьПуть();
	ОчиститьНакрывающиеСтрокуИСтолбец();
	УдалитьПометки();
	ШагАлгоритма = 3;
КонецПроцедуры

//Вспомогательная процедура для шага №6 алгоритма
Процедура НайтиНаименьшееЗначение(НаименьшееЗначение)
	Для ИндексСтроки = 0 По КолВоСтрокМатрицы-1 Цикл
		Для ИндексСтолбца = 0 По КолВоСтолбцовМатрицы-1 Цикл
			Если НакрывающаяСтрока[ИндексСтроки] = 0 И НакрывающийСтолбец[ИндексСтолбца] = 0 И НаименьшееЗначение > МатрицаНазначений[ИндексСтроки][ИндексСтолбца] Тогда
				НаименьшееЗначение = МатрицаНазначений[ИндексСтроки][ИндексСтолбца];
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
КонецПроцедуры

//Найдем наименьшее значение в матрице (при условии, что элемент, содержащий знчение, не зачеркнут (не накрыт))
//Добавим это значение к каждому элементу каждой зачернутой (накрытой) строки.
//Вычтем это значение из каждого элемента каждого не зачернутого (не накрытого) столбца
Процедура ВыполнитьШагШестой(ШагАлгоритма)
	НаименьшееЗначение = 2147483647; //Максимальное значение типа Int (очень большое число, этого достаточно)
	НайтиНаименьшееЗначение(НаименьшееЗначение);
	Для ИндексСтроки = 0 По КолВоСтрокМатрицы-1 Цикл
		Для ИндексСтолбца = 0 По КолВоСтолбцовМатрицы-1 Цикл
			Если НакрывающаяСтрока[ИндексСтроки] = 1 Тогда
				МатрицаНазначений[ИндексСтроки][ИндексСтолбца] = МатрицаНазначений[ИндексСтроки][ИндексСтолбца] + НаименьшееЗначение;
			КонецЕсли;	
			
			Если НакрывающийСтолбец[ИндексСтолбца] = 0 Тогда
				МатрицаНазначений[ИндексСтроки][ИндексСтолбца] = МатрицаНазначений[ИндексСтроки][ИндексСтолбца] - НаименьшееЗначение;
			КонецЕсли;	
		КонецЦикла;
	КонецЦикла;
	ШагАлгоритма = 4;
КонецПроцедуры

#КонецОбласти

